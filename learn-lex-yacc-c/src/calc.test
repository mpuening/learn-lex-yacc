#!/bin/bash

echo 1..12 # Test plan; 12 tests

CALC=./calc

function test_build {
	if [ -f "$CALC" ]; then
		echo "ok build - $CALC executable found. # OK"
	else 
		echo "not ok build - $CALC executable not found # FAIL"
		return
	fi
}

function test_empty {
	# process empty input, lines of output should be zero
	lines=`eval echo "" | $CALC | wc -l | awk '{ print $1 }'`

	if [ $lines -eq 0 ]; then
		echo "ok empty - correct calc output # OK"
	else
		echo "not ok empty - incorrect calc output # FAIL"		
	fi
}

function test_garbage {
	# process bad input, output should be syntax error
	output=`eval echo "2;" | $CALC 2>&1`

	if [ "$output" = "syntax error" ]; then
		echo "ok garbage - correct calc output # OK"
	else
		echo "not ok garbage - incorrect calc output # FAIL"		
	fi
}

function test_garbage2 {
	# process bad input, output should be syntax error
	output=`eval echo "a = abc;" | $CALC 2>&1 | head -1`

	if [ "$output" = "Undefined variable: abc" ]; then
		echo "ok garbage2 - correct calc output # OK"
	else
		echo "not ok garbage2 - incorrect calc output # FAIL"		
	fi
}

function test_input_file {
	# test input file
	local name=$1
	local input=$2
	local expected=$3
	$CALC < $input > calc.out 
	diff $expected calc.out

	if [ $? -eq 0 ]; then
		echo "ok $name - correct calc output # OK"
	else
		echo "not ok $name - incorrect calc output # FAIL"		
	fi
	rm calc.out
}

test_build
test_empty
test_garbage
test_garbage2
test_input_file terms test-data/terms.input test-data/terms.expected
test_input_file add   test-data/add.input   test-data/add.expected
test_input_file sub   test-data/sub.input   test-data/sub.expected
test_input_file mult  test-data/mult.input  test-data/mult.expected
test_input_file div   test-data/div.input   test-data/div.expected
test_input_file order test-data/order.input test-data/order.expected
test_input_file mixed test-data/mixed.input test-data/mixed.expected
test_input_file vars  test-data/vars.input  test-data/vars.expected

exit 0

# How to report on test cases

# https://www.gnu.org/software/automake/manual/html_node/Use-TAP-with-the-Automake-test-harness.html

#echo 1..3 # Test plan; 3 tests
#echo "ok 1 - Output equals # OK"
#echo "not ok 2 - Test failed # FAIL"
#echo "ok 3 - Test skipped # SKIP"
